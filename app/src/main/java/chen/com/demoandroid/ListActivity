package example.lens.takephoto;

import android.annotation.SuppressLint;
import android.os.Bundle;
import android.os.Environment;
import android.support.v4.widget.SwipeRefreshLayout;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import example.lens.takephoto.bean.UserBean;
import java.io.File;
import java.util.ArrayList;
import java.util.List;

public class ListActivity extends AppCompatActivity {

  private RecyclerView recyclerView;
  private SwipeRefreshLayout swipeRefreshLayout;
  private List<UserBean> data = new ArrayList<UserBean>();
  private int lastItemPosition = 0;
  private final String CACHE_DIR = Environment.getExternalStorageDirectory() + File.separator + "LensPhotos";

  private int lastSize = 0;//上次读取到的数
  private boolean isChanged = false;

  @Override protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_list);
    //生成数据
    initVar();
    initView();
  }

  private void initView() {
    //这个Adapter传进去的UserBean的List
    //因为是万能的Adapter，所以摆放数据只能在用的时候才写
    final CommonAdapter<UserBean> adapter = new CommonAdapter<UserBean>(this, R.layout.item_list, data) {
      @Override public void convert(ViewHolder holder, UserBean userBean) {
        holder.setImg(ListActivity.this, R.id.img_photo, userBean.getImgPath());
        holder.setText(R.id.tvName, userBean.getName());
        holder.setText(R.id.tvAge, userBean.getTypeOfFactory() + userBean.getId());
      }
    };
    swipeRefreshLayout = (SwipeRefreshLayout) findViewById(R.id.srLayout);
    swipeRefreshLayout.setOnRefreshListener(new SwipeRefreshLayout.OnRefreshListener() {
      @Override public void onRefresh() {
        new Thread(new Runnable() {
          @Override public void run() {
            //添加数据
            initVar();
            try {
              //模拟加载耗时
              Thread.sleep(1000);
            } catch (InterruptedException e) {
              e.printStackTrace();
            }
            //  子线程中改变UI要runOnUiThread
            runOnUiThread(new Runnable() {
              @Override public void run() {
                // 使加载圆环消失
                swipeRefreshLayout.setRefreshing(false);
                //告知Adapter更新数据
                if (isChanged) adapter.notifyDataSetChanged();
              }
            });
          }
        }).start();
      }
    });
    recyclerView = (RecyclerView) findViewById(R.id.recyclerView);
    final LinearLayoutManager manager = new LinearLayoutManager(this);
    recyclerView.setLayoutManager(manager);

    recyclerView.setAdapter(adapter);
    recyclerView.setOnScrollListener(new RecyclerView.OnScrollListener() {
      @Override public void onScrollStateChanged(RecyclerView recyclerView, int newState) {
        super.onScrollStateChanged(recyclerView, newState);
        //recyclerView停下来而且可见的item的position是最后一个
        if (newState == RecyclerView.SCROLL_STATE_IDLE && lastItemPosition + 1 == adapter.getItemCount()) {
          new Thread(new Runnable() {
            @Override public void run() {
              initVar();
              try {
                Thread.sleep(1000);
              } catch (InterruptedException e) {
                e.printStackTrace();
              }
              if (isChanged) {
                runOnUiThread(new Runnable() {
                  @Override public void run() {
                    adapter.notifyDataSetChanged();
                  }
                });
              }
            }
          }).start();
        }
      }

      //滚动时获取最后一个可见item的position
      @Override public void onScrolled(RecyclerView recyclerView, int dx, int dy) {
        super.onScrolled(recyclerView, dx, dy);
        lastItemPosition = manager.findLastVisibleItemPosition();
      }
    });
  }

  private void initVar() {
    //for (int i = lastItemPosition; i < lastItemPosition + 10; i++) {
    //  data.add(new UserBean("LL",i, "员工" + i,""));
    //}

    List<String> photoList = getImagePathFromSD();
    if (photoList == null || photoList.isEmpty()) {
      for (int i = lastItemPosition; i < lastItemPosition + 10; i++) {
        data.add(new UserBean(i, "员工" + i));
      }
      return;
    }

    String name, id;
    String[] temp;
    int len = photoList.size();
    if (lastSize == len) {
      isChanged = false;
      return;
    }
    isChanged = true;
    lastSize = len;
    for (int i = 0; i < len; i++) {
      temp = photoList.get(i).split("_");
      id = temp[1].substring(0, temp[1].lastIndexOf(".jpg"));
      name = temp[0].substring(temp[0].lastIndexOf("/") + 1);
      data.add(new UserBean("LL", Integer.parseInt(id), name, photoList.get(i)));
    }
  }

  /**
   * 从sd卡获取图片资源
   */
  private List<String> getImagePathFromSD() {
    // 图片列表
    List<String> imagePathList = new ArrayList<String>();
    // 得到sd卡内image文件夹的路径   File.separator(/)
    // 得到该路径文件夹下所有的文件
    File fileAll = new File(CACHE_DIR);
    File[] files = fileAll.listFiles();
    if (files == null || files.length < 1) {
      return null;
    }
    // 将所有的文件存入ArrayList中,并过滤所有图片格式的文件
    for (int i = 0; i < files.length; i++) {
      File file = files[i];
      if (checkIsImageFile(file.getPath())) {
        imagePathList.add(file.getPath());
      }
    }
    // 返回得到的图片列表
    return imagePathList;
  }

  /**
   * 检查扩展名，得到图片格式的文件
   *
   * @param fName 文件名
   */
  @SuppressLint("DefaultLocale") private boolean checkIsImageFile(String fName) {
    boolean isImageFile = false;
    // 获取扩展名
    String FileEnd = fName.substring(fName.lastIndexOf(".") + 1, fName.length()).toLowerCase();
    if (FileEnd.equals("jpg")) {
      //if (FileEnd.equals("jpg") || FileEnd.equals("png") || FileEnd.equals("gif") || FileEnd.equals("jpeg") || FileEnd.equals("bmp")) {
      isImageFile = true;
    } else {
      isImageFile = false;
    }
    return isImageFile;
  }
}
